{"version":3,"file":"js/map.e862981d.js","mappings":"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","sources":["webpack://weather-project-vue3/./src/views/Map.vue?b551","webpack://weather-project-vue3/./src/views/Map.vue","webpack://weather-project-vue3/./src/utils/throttle.ts","webpack://weather-project-vue3/./src/views/Map.vue?0d41"],"sourcesContent":["import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { ref: \"canvas\" }\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createElementVNode(\"h1\", null, \"Карта \" + _toDisplayString(_ctx.layerTitle), 1),\n    _createElementVNode(\"div\", {\n      class: \"map-wrap\",\n      onMousedown: _cache[0] || (_cache[0] = \n//@ts-ignore\n(...args) => (_ctx.startDrag && _ctx.startDrag(...args))),\n      onMousemove: _cache[1] || (_cache[1] = \n//@ts-ignore\n(...args) => (_ctx.onDrag && _ctx.onDrag(...args))),\n      onMouseup: _cache[2] || (_cache[2] = \n//@ts-ignore\n(...args) => (_ctx.endDrag && _ctx.endDrag(...args))),\n      onMouseleave: _cache[3] || (_cache[3] = \n//@ts-ignore\n(...args) => (_ctx.onMouseLeave && _ctx.onMouseLeave(...args))),\n      onTouchstart: _cache[4] || (_cache[4] = \n//@ts-ignore\n(...args) => (_ctx.startDrag && _ctx.startDrag(...args))),\n      onTouchmove: _cache[5] || (_cache[5] = \n//@ts-ignore\n(...args) => (_ctx.onDrag && _ctx.onDrag(...args))),\n      onTouchend: _cache[6] || (_cache[6] = \n//@ts-ignore\n(...args) => (_ctx.endDrag && _ctx.endDrag(...args))),\n      onTouchcancel: _cache[7] || (_cache[7] = \n//@ts-ignore\n(...args) => (_ctx.onTouchCancel && _ctx.onTouchCancel(...args)))\n    }, [\n      _createElementVNode(\"canvas\", _hoisted_1, null, 512)\n    ], 32),\n    _cache[8] || (_cache[8] = _createElementVNode(\"div\", { class: \"map-caption\" }, [\n      _createElementVNode(\"span\", null, \"Источник карты мира: OpenStreetMap.org\")\n    ], -1))\n  ], 64))\n}","<template>\n  <h1>Карта {{ layerTitle }}</h1>\n  <div\n    class=\"map-wrap\"\n    @mousedown=\"startDrag\"\n    @mousemove=\"onDrag\"\n    @mouseup=\"endDrag\"\n    @mouseleave=\"onMouseLeave\"\n    @touchstart=\"startDrag\"\n    @touchmove=\"onDrag\"\n    @touchend=\"endDrag\"\n    @touchcancel=\"onTouchCancel\"\n  >\n    <canvas ref=\"canvas\"></canvas>\n  </div>\n  <div class=\"map-caption\">\n    <span>Источник карты мира: OpenStreetMap.org</span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\nimport { throttle } from \"@/utils/throttle\";\n\nexport default defineComponent({\n  name: \"Map\",\n  data() {\n    return {\n      apiKey: process.env.VUE_APP_OPENWEATHER_API_KEY as string,\n      layer: \"precipitation_new\" as string,\n      z: 3 as number, //уровень зума, оптимальный для всей Земли\n      tileSize: 256 as number,\n      cacheTTL: (1000 * 60 * 30) as number, //30 минут кэш\n      isDragging: false as boolean,\n      offsetX: 0 as number,\n      offsetY: 0 as number,\n      lastX: 0 as number,\n      lastY: 0 as number,\n      updateTimer: null as number | null,\n    };\n  },\n  methods: {\n    async renderMap(): Promise<void> {\n      const { z, layer, apiKey, tileSize } = this;\n      const tilesPerAxis = Math.pow(2, z); //при z=2, будет 16 тайлов, при z=3 - 64 тайла\n      const canvas = this.$refs.canvas as HTMLCanvasElement | undefined;\n      if (!canvas) return;\n\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) return;\n\n      //Размер итогового canvas\n      canvas.width = tileSize * tilesPerAxis;\n      canvas.height = tileSize * tilesPerAxis;\n\n      console.log(`Рисуем карту: z=${z}, тайлов=${tilesPerAxis ** 2}`);\n\n      //подготовка OSM подложки\n      for (let x = 0; x < tilesPerAxis; x++) {\n        for (let y = 0; y < tilesPerAxis; y++) {\n          const osmUrl = `https://tile.openstreetmap.org/${z}/${x}/${y}.png`;\n          await this.drawTile(ctx, osmUrl, x, y);\n        }\n      }\n\n      //Загрузка тайлов для слоя погоды - поверх подложки\n      for (let x = 0; x < tilesPerAxis; x++) {\n        for (let y = 0; y < tilesPerAxis; y++) {\n          const url = `https://tile.openweathermap.org/map/${layer}/${z}/${x}/${y}.png?appid=${apiKey}`;\n          await this.drawTile(ctx, url, x, y);\n        }\n      }\n\n      console.log(\"Карта готова\");\n    },\n    async drawTile(ctx: CanvasRenderingContext2D, url: string, x: number, y: number): Promise<void> {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.crossOrigin = \"anonymous\";\n        img.onload = () => {\n          ctx.globalAlpha = 1;\n          ctx.drawImage(img, x * this.tileSize, y * this.tileSize);\n          ctx.globalAlpha = 1;\n          resolve();\n        };\n        img.onerror = reject;\n        img.src = url;\n      });\n    },\n    startDrag(event: MouseEvent | TouchEvent) {\n      this.isDragging = true;\n\n      //проверка - тач или мышь\n      const point = event instanceof TouchEvent ? event.touches[0] : event;\n\n      this.lastX = point.clientX;\n      this.lastY = point.clientY;\n    },\n    onDrag(event: MouseEvent | TouchEvent) {\n      if (!this.isDragging) return;\n\n      const point = event instanceof TouchEvent ? event.touches[0] : event;\n\n      const dx = point.clientX - this.lastX;\n      const dy = point.clientY - this.lastY;\n      this.lastX = point.clientX;\n      this.lastY = point.clientY;\n      this.offsetX += dx;\n      this.offsetY += dy;\n\n      const canvas = this.$refs.canvas as HTMLCanvasElement;\n      const wrapper = canvas.parentElement as HTMLElement;\n\n      const canvasWidth = canvas.clientWidth;\n      const canvasHeight = canvas.clientHeight;\n\n      const wrapWidth = wrapper.clientWidth;\n      const wrapHeight = wrapper.clientHeight;\n\n      //ограничние по горизонтали\n      const maxOffsetX = 0;\n      const minOffsetX = wrapWidth - canvasWidth;\n\n      //ограничение по вертикали\n      const maxOffsetY = 0;\n      const minOffsetY = wrapHeight - canvasHeight;\n\n      if (this.offsetX < minOffsetX) {\n        this.offsetX = minOffsetX;\n      } else if (this.offsetX > maxOffsetX) {\n        this.offsetX = maxOffsetX;\n      }\n\n      if (this.offsetY < minOffsetY) {\n        this.offsetY = minOffsetY;\n      } else if (this.offsetY > maxOffsetY) {\n        this.offsetY = maxOffsetY;\n      }\n\n      canvas.style.transform = `translate(${this.offsetX}px, ${this.offsetY}px)`;\n    },\n    endDrag() {\n      this.isDragging = false;\n    },\n    onMouseLeave() {\n      if (this.isDragging) {\n        this.endDrag();\n      }\n    },\n    onTouchCancel() {\n      this.onMouseLeave();\n    },\n    startAutoUpdate() {\n      if (!this.updateTimer) {\n        this.updateTimer = window.setInterval(() => {\n          console.log(\"Автоматическое обновление карты\");\n          this.renderMap();\n        }, this.cacheTTL);\n      }\n    },\n    stopAutoUpdate() {\n      if (this.updateTimer) {\n        clearInterval(this.updateTimer);\n        this.updateTimer = null;\n      }\n    },\n  },\n  mounted() {\n    this.renderMap();\n    this.onDrag = throttle(this.onDrag, 50);\n    this.startAutoUpdate();\n  },\n  activated() {\n    this.startAutoUpdate();\n  },\n  deactivated() {\n    this.stopAutoUpdate();\n  },\n  computed: {\n    layerTitle(): string {\n      switch (this.layer) {\n        case \"precipitation_new\":\n          return \"осадков\";\n        case \"clouds_new\":\n          return \"облаков\";\n        case \"pressure_new\":\n          return \"давления на уровне моря\";\n        case \"wind_new\":\n          return \"скорости ветра\";\n        case \"temp_new\":\n          return \"температуры\";\n        default:\n          return \"\";\n      }\n    },\n  },\n});\n</script>\n\n<style scoped lang=\"scss\">\n.map-wrap {\n  max-width: 1000px;\n  width: 100%;\n  margin: 0 auto;\n  aspect-ratio: 1/0.65;\n  border: 2px solid #333;\n  overflow: hidden;\n  position: relative;\n  background: #818b90;\n  cursor: grab;\n\n  &:active {\n    cursor: grabbing;\n  }\n}\n\ncanvas {\n  position: absolute;\n  top: 0;\n  left: 0;\n  transition: transform 0s;\n  image-rendering: pixelated;\n}\n\n.map-caption {\n  margin: 30px 0 20px 0;\n  font-size: 22px;\n  line-height: 110%;\n}\n</style>\n","export function throttle(func: (...args: any[]) => void, delay: number) {\n  //ID таймера\n  let timeoutId: number | null;\n  //флаг - разрешение вызова функции\n  let canRun: boolean = true;\n\n  return function (this: any, ...args: any[]) {\n    //сохраняю контекст вызова\n    const context = this;\n\n    if (!canRun) {\n      return;\n    }\n\n    //запрет на вызов, пока таймер не истечет\n    canRun = false;\n    func.apply(context, args);\n\n    timeoutId = setTimeout(() => {\n      //разрешение вызова после задержки\n      canRun = true;\n    }, delay);\n  };\n}\n","import { render } from \"./Map.vue?vue&type=template&id=9b1c9cc4&scoped=true&ts=true\"\nimport script from \"./Map.vue?vue&type=script&lang=ts\"\nexport * from \"./Map.vue?vue&type=script&lang=ts\"\n\nimport \"./Map.vue?vue&type=style&index=0&id=9b1c9cc4&scoped=true&lang=scss\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-9b1c9cc4\"]])\n\nexport default __exports__"],"names":["_hoisted_1","ref","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createElementBlock","_Fragment","_createElementVNode","_toDisplayString","layerTitle","class","onMousedown","args","startDrag","onMousemove","onDrag","onMouseup","endDrag","onMouseleave","onMouseLeave","onTouchstart","onTouchmove","onTouchend","onTouchcancel","onTouchCancel","throttle","func","delay","timeoutId","canRun","context","this","apply","setTimeout","defineComponent","name","data","apiKey","process","layer","z","tileSize","cacheTTL","isDragging","offsetX","offsetY","lastX","lastY","updateTimer","methods","renderMap","tilesPerAxis","Math","pow","canvas","$refs","ctx","getContext","width","height","console","log","x","y","osmUrl","drawTile","url","Promise","resolve","reject","img","Image","crossOrigin","onload","globalAlpha","drawImage","onerror","src","event","point","TouchEvent","touches","clientX","clientY","dx","dy","wrapper","parentElement","canvasWidth","clientWidth","canvasHeight","clientHeight","wrapWidth","wrapHeight","maxOffsetX","minOffsetX","maxOffsetY","minOffsetY","style","transform","startAutoUpdate","window","setInterval","stopAutoUpdate","clearInterval","mounted","activated","deactivated","computed","__exports__"],"sourceRoot":""}